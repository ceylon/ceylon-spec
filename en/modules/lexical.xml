<chapter id="lexical">
    <title>Lexical structure</title>
    
    <para>The lexical structure of Ceylon source files is very similar to Java. 
    Like Java, Unicode escape sequences <literal>\uXXXX</literal> are processed
    first, to produce a raw stream of Unicode characters. This character stream 
    is then processed by the lexer to produce a stream of terminal tokens of the 
    Ceylon grammar.</para>
        
    <comment><para>TODO: what is the character encoding? Does it work just like
    <literal>javac</literal>?</para></comment>
        
    <section id="whitespace">
        <title>Whitespace</title>
        
        <para>Whitespace characters are the ASCII <literal>SP</literal>, 
        <literal>HT</literal>, <literal>FF</literal>, <literal>LF</literal> and 
        <literal>CR</literal> characters.</para>
        
        <programlisting>Whitespace: " " | Tab | Formfeed | Newline | Return</programlisting>
        
        <para>Outside of a comment, string literal, or single quoted literal,
        whitespace acts as a token separator and is immediately discarded by
        the lexer. Whitespace is not used as a statement separator.</para>
        
    </section>
    
    <section id="comments">
        <title>Comments</title>
        
        <para>There are two kinds of comments:</para>
        
        <itemizedlist>
            <listitem>
                <para>a multiline comment that begins with <literal>/*</literal> 
                and extends until <literal>*/</literal>, and</para>
            </listitem>
            <listitem>
                <para>an end-of-line comment begins with <literal>//</literal> 
                or <literal>#!</literal> and extends until a line terminator: an 
                ASCII <literal>LF</literal>, <literal>CR</literal> or 
                <literal>CR LF</literal>.</para>
            </listitem>
        </itemizedlist>
        
        <para>Both kinds of comments can be nested.</para>
        
        <programlisting>LineComment: ("//"|"#!") ~(Newline|Return)* (Return Newline | Return | Newline)?</programlisting>
        
        <programlisting>MultilineComment: "/*" ( MultilineCommmentCharacter | MultilineComment )* "*/"</programlisting>
        
        <programlisting>MultilineCommmentCharacter: ~("/"|"*") | ("/" ~"*") => "/" | ("*" ~"/") => "*"</programlisting>
        
        <para>The following examples are legal comments:</para>
        
        <programlisting>//this comment stops at the end of the line</programlisting>
        
        <programlisting>/*
   but this is a comment that spans
   multiple lines
*/</programlisting>
  
        <programlisting>#!/usr/bin/ceylon</programlisting>
        
        <para>Comments are treated as whitespace by both the compiler and documentation
        compiler. Comments may act as token separators, but their content is immediately 
        discarded by the lexer.</para>
  
    </section>
    
    <section id="identifiersandkeywords">
        <title>Identifiers and keywords</title>
        
        <para>Identifiers may contain upper and lowercase letters, digits and 
        underscore.</para>
        
        <programlisting>IdentifierChar: LowercaseChar | UppercaseChar | Digit</programlisting>
        <programlisting>Digit: "0".."9"</programlisting>
        <programlisting>LowercaseChar: &lt;lowercase letter&gt; | "_"</programlisting>
        <programlisting>UppercaseChar: &lt;non-lowercase letter&gt;</programlisting>
        
        <para>All identifiers are case sensitive: <literal>Person</literal> and
        <literal>person</literal> are two different legal identifiers.</para>
        
        <para>The Ceylon lexer distinguishes identifiers which begin with an initial 
        uppercase character from identifiers which begin with an initial lowercase
        character or underscore. Additionally, both identifier types may be qualified
	explicitly using a prefix to disambiguate them from keywords or to specify an
	identifier name not obeying ceylon's conventions.</para>
        
        <programlisting>LIdentifier: LowercaseChar IdentifierChar* | LIdentifierPrefix IdentifierChar+</programlisting>
        <programlisting>UIdentifier: UppercaseChar IdentifierChar* | UIdentifierPrefix IdentifierChar+</programlisting>
	<programlisting>LIdentifierPrefix: "\i"</programlisting>
	<programlisting>UIdentifierPrefix: "\I"</programlisting>

        <para>The following examples are legal identifiers:</para>
        
        <programlisting>Person</programlisting>
        <programlisting>name</programlisting>
        <programlisting>personName</programlisting>
        <programlisting>_id</programlisting>
        <programlisting>x2</programlisting>
        <programlisting>\I_id</programlisting>
        <programlisting>\Iobject</programlisting>
	<programlisting>\iObject</programlisting>

	<para>The prefix is not considered part of the identifier name. <literal>\iperson</literal>
	is equal to <literal>person</literal>. However, while <literal>\Iperson</literal>
	would also equal <literal>person</literal> and <literal>\iperson</literal>, it is considered an
	<programlisting>UIdentifier</programlisting> and may not be lexed so it could compare.</para>
        
        <para>Package and module names are built from all-lowercase identifier names.</para>
        
        <programlisting>PIdentifier: LIdentifierPrefix? LowercaseChar+</programlisting>
        
        <para>The following reserved words are not legal identifiers:</para>
        
        <para><literal>
        import
        class interface object given value assign void function
        of extends satisfies adapts abstracts
        in out
        return break continue throw
        if else switch case for while try catch finally then
        this outer super
        is exists nonempty
        </literal></para>

	<para>However, they are legal identifier names which need to be qualified.
	Example: <literal>\ielse</literal></para>

        <para>The following are <emphasis>not</emphasis> legal identifiers:</para>
	
	<para><literal>\i\iperson \i \I else el\Ie</literal></para> 
    </section>
    
    <section id="literals">
        <title>Literals</title>
        
    <section id="numericliterals">
        <title>Numeric literals</title>
        
        <para>An integer literal has this form:</para>
        
        <programlisting>IntegerLiteral: Digits Magnitude?</programlisting>
        
        <para>A floating point literal has this form:</para>
        
        <programlisting>FloatLiteral: Digits ("." FractionalDigits (Exponent | Magnitude | FractionalMagnitude)? | FractionalMagnitude)</programlisting>
        
        <para>Digits may be separated into groups of three using an underscore.</para>
        
        <programlisting>Digits: Digit+ | Digit{1..3} ("_" Digit{3})+</programlisting>
        <programlisting>FractionalDigits: Digit+ | (Digit{3} "_")+ Digit{1..3} </programlisting>
        
        <para>A floating point literal may include either an <emphasis>exponent</emphasis> 
        (for scientific notation) or a <emphasis>magnitude</emphasis> (an SI unit
        prefix). A natural literal may include a magnitude.</para>
        
        <programlisting>Exponent: ("E"|"e") ("+"|"-")? Digits</programlisting>
        
        <programlisting>Magnitude: "k" | "M" | "G" | "T" | "P"</programlisting>
        <programlisting>FractionalMagnitude: "m" | "u" | "n" | "p" | "f"</programlisting>
        
        <para>The following examples are legal numeric literals:</para>
        
        <programlisting>69</programlisting>
        <programlisting>6.9</programlisting>
        <programlisting>0.999e-10</programlisting>
        <programlisting>1.0E2</programlisting>
        <programlisting>10000</programlisting>
        <programlisting>1_000_000</programlisting>
        <programlisting>12_345.678_9</programlisting>
        <programlisting>1.5k</programlisting>
        <programlisting>12M</programlisting>
        <programlisting>2.34p</programlisting>
        <programlisting>5u</programlisting>
        
        <para>The following are <emphasis>not</emphasis> valid numeric literals:</para>
        
        <programlisting>.33  //Error: floating point literals may not begin with a decimal point</programlisting>
        <programlisting>1.  //Error: floating point literals may not end with a decimal point</programlisting>
        <programlisting>99E+3  //Error: floating point literals with an exponent must contain a decimal point</programlisting>
        <programlisting>12_34  //Error: digit groups must be of length three</programlisting>
        
    </section>
    
    <section id="characterliterals">
        <title>Character literals</title>
        
        <para>A single character literal consists of a character, surrounded by backticks.</para> 
        
        <programlisting>CharacterLiteral: "`" Character "`"</programlisting>
        
        <programlisting>Character: ~("`" | "\" | Tab | Formfeed | Newline | Return | Backspace) | EscapeSequence</programlisting>
        
        <programlisting>EscapeSequence: "\" ("b" | "t" | "n" | "f" | "r" | "\" | "&quot;" | "'" | "`" )</programlisting>
        
        <para>The following are legal character literals:</para>
        
        <programlisting>`A`</programlisting>
        <programlisting>`#`</programlisting>
        <programlisting>` `</programlisting>
        <programlisting>`\n`</programlisting>
        
        <comment><para>TODO: should we support an escape sequence for Unicode character names
        <literal>\N{name}</literal> like Python does?</para></comment>
        
    </section>
    
    <section id="stringliterals">
        <title>String literals</title>
        
        <para>A character string literal is a character sequence surrounded by 
        double quotes.</para>
        
        <programlisting>StringLiteral: "&quot;" StringCharacter* "&quot;"</programlisting>
        
        <programlisting>StringCharacter: ~( "\" | "&quot;" ) | EscapeSequence</programlisting>
        
        <para>The following are legal strings:</para>
        
        <programlisting>"Hello!"</programlisting>
        
        <programlisting>" \t\n\f\r,;:"</programlisting>
    
    </section>
    
    <section id="singlequotedliterals">
        <title>Single quoted literals</title>
        
        <para>Single-quoted strings are used to express literal values for 
        user-defined types. A single quoted literal is a character sequence 
        surrounded by single quotes:</para>
        
        <programlisting>QuotedLiteral: "'" QuotedLiteralCharacter* "'"</programlisting>
        
        <programlisting>QuotedLiteralCharacter: ~("'")</programlisting>
        
        <comment><para>TODO: should we support escape sequences in quoted literals? At least
        there should be some way to embed a single quote, right? The problem is that if we
        make you escape <literal>\</literal>, regular expressions and windows paths get
        really ugly.</para></comment>
        
    </section>
    
        
    </section>
    
    <section id="operatorsanddelimiters">
        <title>Operators and delimiters</title>
        
        <para>The following character sequences are operators and/or punctuation:</para>
        
        <para><literal>
        , ; ...
        #
        { } ( ) [ ]
        []
        . ?. []. 
        =
        + - / * % **
        ++ --
        .. ->
        ?
        ! &amp;&amp; ||
        ~ &amp; | ^
        === == != &lt; &gt; &lt;= &gt;= &lt;=&gt;
        := .= += -= /= *= %= |= &amp;= ^= ~= ||= &amp;&amp;=
        </literal></para>
        
    </section>

</chapter>